name: Build and Release macOS App

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools py2app pillow

      - name: Install jaraco.text for py2app compatibility
        run: |
          pip install jaraco.text

      - name: Verify nockchain-wallet executable exists
        run: |
          ls -la nockchain-wallet
          file nockchain-wallet

      - name: Build macOS app
        run: |
          # Choose build mode based on trigger
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "üî® Building full distributable app for release..."
            BUILD_CMD="python setup.py py2app"
            BUILD_MODE="full"
          else
            echo "üîó Building alias app for development/testing..."
            BUILD_CMD="python setup.py py2app --alias"
            BUILD_MODE="alias"
          fi

          # Execute the build
          if $BUILD_CMD; then
            echo "‚úÖ Build completed successfully (mode: $BUILD_MODE)"
          else
            echo "‚ùå Build failed"
            exit 1
          fi

          # Verify app was created
          if [ -d "dist/NockGUIWallet.app" ]; then
            echo "‚úÖ App directory found"

            if [ "$BUILD_MODE" = "alias" ]; then
              # Check symlinks for alias mode
              if [ -L "dist/NockGUIWallet.app/Contents/MacOS/NockGUIWallet" ]; then
                echo "‚úÖ Executable symlink found"
              else
                echo "‚ùå Executable symlink not found"
                exit 1
              fi

              if [ -L "dist/NockGUIWallet.app/Contents/Resources/nockchain-wallet" ]; then
                echo "‚úÖ nockchain-wallet symlink found"
              else
                echo "‚ùå nockchain-wallet symlink not found"
              fi

              echo "üì¶ Alias app structure (symlinks):"
              find dist/NockGUIWallet.app -type l -exec ls -la {} \; | head -10
            else
              # Check full copies for release mode
              if [ -f "dist/NockGUIWallet.app/Contents/MacOS/NockGUIWallet" ] && [ ! -L "dist/NockGUIWallet.app/Contents/MacOS/NockGUIWallet" ]; then
                echo "‚úÖ Executable file found (not symlink)"
              else
                echo "‚ùå Executable file not found or is symlink"
                exit 1
              fi

              if [ -f "dist/NockGUIWallet.app/Contents/Resources/nockchain-wallet" ] && [ ! -L "dist/NockGUIWallet.app/Contents/Resources/nockchain-wallet" ]; then
                echo "‚úÖ nockchain-wallet file found (not symlink)"
              else
                echo "‚ùå nockchain-wallet file not found or is symlink"
              fi

              echo "üì¶ Full app structure (copied files):"
              ls -la dist/NockGUIWallet.app/Contents/MacOS/
              ls -la dist/NockGUIWallet.app/Contents/Resources/ | head -10
            fi
          else
            echo "‚ùå App directory not found"
            exit 1
          fi

      - name: Verify app bundle
        run: |
          ls -la dist/
          ls -la dist/NockGUIWallet.app/Contents/Resources/
          test -f dist/NockGUIWallet.app/Contents/Resources/nockchain-wallet && echo "nockchain-wallet bundled successfully"

      - name: Create app archive
        run: |
          cd dist
          zip -r NockGUIWallet.app.zip NockGUIWallet.app

      - name: Upload app to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NockGUIWallet-macOS
          path: dist/NockGUIWallet.app.zip

      - name: Upload app to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/NockGUIWallet.app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
